import{_ as p,a as c}from"./chunks/build-更新main分支-1.DuCMaUlJ.js";import{ai as i,x as r,aE as l,L as e,aa as o,v as n}from"./chunks/framework.DNV5qdj1.js";const d="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%88%9B%E5%BB%BAcodespace.BjJAue13.png",E="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%88%9B%E5%BB%BAcodespace%E8%BF%9B%E5%BA%A6%E6%9D%A1.DGoi9oM2.png",h="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-vsc%E9%A6%96%E9%A1%B5.CF7yDRxp.png",m="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%A4%8D%E7%94%A8codespace.BHkU_1xx.png",g="/assets/contribute-vscode-new-branch.DhTLhmoi.png",u="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E6%96%B0%E5%BB%BA%E5%88%86%E6%94%AF%E5%9F%BA%E4%BA%8E.DiWbGwDZ.png",A="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E6%96%B0%E5%88%86%E6%94%AF%E4%BE%9D%E6%8D%AE%E4%B8%8A%E6%B8%B8.BFzCKFYm.png",_="/assets/contribution-new-branch-name.4aSm_DmN.png",b="/assets/contribution-switch-to-new-branch.DaSfLjMb.png",B="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E8%BF%9B%E8%A1%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9B%B4%E6%94%B9.BUlDah0R.png",C="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E9%87%8D%E5%91%BD%E5%90%8D%E5%9B%BE%E7%89%87.B4dDcIZx.png",k="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8.DYlIYGKj.png",P="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E6%96%87%E6%A1%A3%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2.BG9so5Vb.png",f="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E6%8F%90%E4%BA%A4.TuuGB0xY.png",q="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%8F%91%E5%B8%83%E5%88%86%E6%94%AF.CS-lxVmo.png",D="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%8F%91%E5%B8%83%E5%88%86%E6%94%AF-%E5%88%9B%E5%BB%BAfork.Caccjq-j.png",x="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%88%9B%E5%BB%BApr.C7VGFNQ9.png",y="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%AE%8C%E5%96%84pr%E4%BF%A1%E6%81%AF.gnyns3Pa.png",z="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-pr%E8%AF%A6%E6%83%85.D-5l186-.png",R="/assets/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97-%E5%85%B3%E9%97%ADcodespace.B4XKzdhE.png",j=JSON.parse('{"title":"使用 GitHub Codespace 修改文档","description":"","frontmatter":{},"headers":[],"relativePath":"contributing/github-codespace.md","filePath":"wiki/contributing/github-codespace.md"}'),F={name:"contributing/github-codespace.md"};function G(v,a,S,w,N,H){const t=o("NolebaseGitContributors"),s=o("NolebaseGitChangelog");return n(),r("div",null,[a[0]||(a[0]=l('<h1 id="使用-github-codespace-修改文档" tabindex="-1">使用 GitHub Codespace 修改文档 <a class="header-anchor" href="#使用-github-codespace-修改文档" aria-label="Permalink to &quot;使用 GitHub Codespace 修改文档&quot;">​</a></h1><p>GitHub 代码空间是托管在云上的开发环境，这使得我们无需再安装 VS Code, Node.js 和 Git 等开发软件，就可以对文档进行维护编辑。</p><p>从名称很明显可以看出，「代码空间」是由 GitHub 运营的，因此使用此方法显然需要一个 GitHub 账号。</p><h2 id="_1-进入代码空间" tabindex="-1">1 进入代码空间 <a class="header-anchor" href="#_1-进入代码空间" aria-label="Permalink to &quot;1 进入代码空间&quot;">​</a></h2><p>点击下面的按钮/链接，进入创建/选择代码空间的页面：</p><p><a href="https://codespaces.new/zotero-chinese/wiki?quickstart=1" target="_blank" rel="noreferrer"><img src="https://github.com/codespaces/badge.svg" alt="在 GitHub Codespaces 中打开" loading="lazy"></a></p><p>（仓库主页的按钮与这里的按钮作用一致）</p><h3 id="初次贡献" tabindex="-1">初次贡献 <a class="header-anchor" href="#初次贡献" aria-label="Permalink to &quot;初次贡献&quot;">​</a></h3><p>如果这是你第一次贡献文档，或是你有相当长一段时间没有打开过 CodeSpace 了，你将会看到下面的界面：</p><p><img src="'+d+'" alt="创建代码空间" loading="lazy"></p><p>选择绿色按钮 「Create new codespace」 以创建一个新的代码空间，然后等待页面加载完成，创建进度条完成：</p><p><img src="'+E+'" alt="创建codespace进度条" loading="lazy"></p><p>随后，你将进入到如下页面，代码空间配置完成。</p><p><img src="'+h+'" alt="创建codespace完成" loading="lazy"></p><h3 id="非初次贡献" tabindex="-1">非初次贡献 <a class="header-anchor" href="#非初次贡献" aria-label="Permalink to &quot;非初次贡献&quot;">​</a></h3><p>如果你曾在近期创建过 CodeSpace，点击上述按钮时，你将在列表中看到一个已存在的 CodeSpace 。</p><p>可以通过点击 CodeSpace 的名称（下图为 「potential halibut」，但每个人创建的名称可能略有差异）进入这个 CodeSpace；</p><p>也可以通过点击绿色按钮「Resume this codespace」进入这个 CodeSpace。</p><p><img src="'+m+'" alt="复用CodeSpace" loading="lazy"></p><p>你也可以通过点击「Create a new one」来继续创建一个新的 CodeSpace，但通常我们可以直接复用已有的。</p><h2 id="_2-修改和提交" tabindex="-1">2 修改和提交 <a class="header-anchor" href="#_2-修改和提交" aria-label="Permalink to &quot;2 修改和提交&quot;">​</a></h2><h3 id="_2-1-创建新分支" tabindex="-1">2.1 创建新分支 <a class="header-anchor" href="#_2-1-创建新分支" aria-label="Permalink to &quot;2.1 创建新分支&quot;">​</a></h3><p>切换到 <code>源代码管理</code>窗格，依次选择<code>···</code> 按钮——<code>分支</code>。</p><p>如果你是第一次贡献，则选择<code>创建新分支</code>，</p><p><img src="'+g+'" alt="新建分支" loading="lazy"></p><p>否则，选择 <code>创建新分支依据...</code>，然后选择 <code>upstream/main</code>，</p><p><img src="'+u+'" alt="新建分支基于" loading="lazy"></p><p><img src="'+A+'" alt="依据上游分支" loading="lazy"></p><p>输入分支名，并按回车确认。创建完成后根据提示切换到新分支。</p><p><img src="'+_+'" alt="输入新分支的名字" loading="lazy"></p><p><img src="'+b+'" alt="切换到新分支" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">什么是分支？为什么要创建新分支？</p><p>分支是一个 Git 术语，你可以简单地理解为：在主版本的基础上复制了一份出来修改。</p><p>始终在新分支上修改内容，有利于 Git 的管理。具体的，如果要同时修改多个内容，某一部分内容被合并，但另一部分内容仍在修改，这时候只在主分支修改显然是不够用的。</p><p>此外，主仓库对 PR 采取 <code>splash and merge</code> 策略，这会把某一分支的所有提交压缩为一个提交然后合入主分支，这有利于保持仓库提交历史的简洁和线性关系，fork 仓库全部在主分支修改时，将无法自动保持与主仓库的提交历史同步，而使用新分支修改就没有这些烦恼。</p></div><p>当然，如果你忘记了创建新分支，也没有关系，在提交的时候，编辑器还会提醒一次。</p><h3 id="_2-2-修改内容" tabindex="-1">2.2 修改内容 <a class="header-anchor" href="#_2-2-修改内容" aria-label="Permalink to &quot;2.2 修改内容&quot;">​</a></h3><p>你可以在左侧「资源管理器」中选择你想要修改的文件，在中间部分编辑文件，进行修改。</p><p><img src="'+B+'" alt="进行对应的修改" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">文档风格和语法</p><p>文档使用 MarkDown 语法，这是一种非常简单的标记式语法，如果你还不了解，请参阅 <a href="./markdown#文档语法风格">文档风格指南 #Markdown 语法</a>。</p></div><div class="info custom-block"><p class="custom-block-title">上传文件</p><p>图片可以通过在 <code>src/assets/images/</code> 文件夹右击，点击 <code>上传</code> 来上传到仓库。</p><p>也可以直接 <code>ctrl+v</code> 粘贴图片。</p><p>粘贴的图片会自动保存到 <code>src/assets/images/</code> 目录，你可以通过在图片路径上右击，选择「重命名符号」来快速重命名图片文件。</p><p><img src="'+C+'" alt="重命名图片" loading="lazy"></p></div><h3 id="_2-3-预览修改" tabindex="-1">2.3 预览修改 <a class="header-anchor" href="#_2-3-预览修改" aria-label="Permalink to &quot;2.3 预览修改&quot;">​</a></h3><p>你可以在下图所示 <code>NPM 脚本</code> 窗格运行 <code>docs:dev</code> 脚本，来启动一个开发服务器。</p><p>如果你没有找到 <code>NPM 脚本</code> 窗格，可以在下图 「资源管理器」 后方的菜单中勾选 「NPM Scripts」 来显示这个窗格。</p><p><img src="'+k+'" alt="启动开发服务器" loading="lazy"></p><p>运行脚本后，会自动打开一个浏览器窗口，这个网页会实时更新你在编辑器中所做出的修改。</p><p>如果你意外关闭了这个网页，可以在上图右下角所示「终端」中，按住 <code>Ctrl</code> + 单击 <code>https://localhost:5137</code>，再次打开这个网页。</p><p><img src="'+P+'" alt="预览页面" loading="lazy"></p><h3 id="_2-4-提交并推送修改" tabindex="-1">2.4 提交并推送修改 <a class="header-anchor" href="#_2-4-提交并推送修改" aria-label="Permalink to &quot;2.4 提交并推送修改&quot;">​</a></h3><p>你可以简单地把「提交」理解为「保存」。如果你已经完成修改，或是想要临时存储一下，可以按照下述流程。</p><p>切换到 <code>源代码管理</code> 窗格，在输入框中输入一个简短的修改描述，然后点击按钮 <code>提交 / Commit</code>。</p><p><img src="'+f+'" alt="提交" loading="lazy"></p><p>如果你在 <a href="#21-创建新分支">2.1 创建新分支</a> 完成了创建分支的操作，那么点击「提交」后，将会出现下面的界面：</p><p><img src="'+q+'" alt="发布分支" loading="lazy"></p><p>点击「发布分支」。如果你是第一次贡献，你将收到一个弹窗提示你是否需要创建一个分支仓库（fork），点击「创建分支 / Create fork」：</p><p><img src="'+D+'" alt="发布分支-创建fork" loading="lazy"></p><p>创建完成后，编辑器右下角将出现两个弹窗，提示已完成。</p><h3 id="_2-5-发起-pull-request" tabindex="-1">2.5 发起 Pull Request <a class="header-anchor" href="#_2-5-发起-pull-request" aria-label="Permalink to &quot;2.5 发起 Pull Request&quot;">​</a></h3><p>前一步的提交只是提交到了自己的仓库，维护者很难注意到，当你认为你修改的差不多了的时候，就可以把修改提交到文档仓库让大家审核，也就是发起 Pull Request。</p><p>点击上面弹窗的蓝色按钮「创建拉取请求 / Create Pull Request」，</p><p><img src="'+x+'" alt="创建pr" loading="lazy"></p><p>在左侧新出现的界面里，为拉取请求写一个简单明了的标题，简单写一个描述，然后点击蓝色按钮「Create / 创建」。</p><p><img src="'+y+'" alt="完善pr信息" loading="lazy"></p><p><img src="'+z+'" alt="pr详情" loading="lazy"></p><h3 id="_2-6-pr-修改" tabindex="-1">2.6 PR 修改 <a class="header-anchor" href="#_2-6-pr-修改" aria-label="Permalink to &quot;2.6 PR 修改&quot;">​</a></h3><p>文档维护者收到 PR 后，会对代码进行审核、评论以及修改，并决定是否接受（merge）或结束该 PR。</p><ol><li><p>维护者审核后，可能会请求你作出一些修改，希望读者对审稿人/维护者的评论和意见保持开放的心态，并努力改进代码或文档。</p><p>新的 PR 不一定会及时审核，取决于审稿人/维护者的当时的工作时间。</p><div class="tip custom-block"><p class="custom-block-title">如何更新 PR？</p><p>已经发起的 PR，可以直接在这个 PR 对应的分支上继续提交新的内容以更新这个 PR。</p></div></li><li><p>PR 创建后，机器人会自动检查格式是否规范，并为这次修改创建一个预览链接。</p><p>如果你是第一次贡献，需要管理员审核后机器人才能运行，这是保障安全需要的。</p><p><img src="'+p+'" alt="netlify预览pr" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">哪些情况会导致检查错误？</p><p>仓库的自动检查包含格式检查和构建检查。格式上，仓库使用 Markdown Lint 作为规范，如果你使用 VS Code 且安装了推荐的插件，那么通常 Lint 检查是可以通过的。</p><p>构建检查失败最可能的原因就是图片、链接等错误，如图片等目录级别错误、大小写错误、相对链接不存在等。</p></div></li><li><p>PR 被接受并合并至官方 main 分支后，则可以更新 main 分支，并删除 pr-workflow 分支</p><p><img src="'+c+'" alt="更新main分支" loading="lazy"></p></li></ol><h2 id="_3-关闭-codespace" tabindex="-1">3 关闭 CodeSpace <a class="header-anchor" href="#_3-关闭-codespace" aria-label="Permalink to &quot;3 关闭 CodeSpace&quot;">​</a></h2><p>点击左下角蓝色按钮「Codespaces: xxxxxx」，在上方弹出的菜单中选择「Stop Current Codespace」，就可以关闭代码空间了，然后你可以安全的关闭浏览器。</p><p><img src="'+R+'" alt="关闭codespace" loading="lazy"></p><p>当然，你也可以直接关闭浏览器，默认情况下，代码空间在 30 分支无活动后会自动关闭。</p><h2 id="其他问题" tabindex="-1">其他问题 <a class="header-anchor" href="#其他问题" aria-label="Permalink to &quot;其他问题&quot;">​</a></h2><h3 id="我忘记新建分支了" tabindex="-1">我忘记新建分支了 <a class="header-anchor" href="#我忘记新建分支了" aria-label="Permalink to &quot;我忘记新建分支了&quot;">​</a></h3><p>不影响。</p><h3 id="我提交的-pr-总有冲突" tabindex="-1">我提交的 PR 总有冲突 <a class="header-anchor" href="#我提交的-pr-总有冲突" aria-label="Permalink to &quot;我提交的 PR 总有冲突&quot;">​</a></h3><p>在新建分支是，请选择「从 upstream/main 新建分支」，以确保始终是基于最新的文档修改。</p><p>如果还有问题，可以在每一次修改前都运行 <code>git:force-sync</code> 脚本。</p><h3 id="我的-pr-检查没有通过" tabindex="-1">我的 PR 检查没有通过 <a class="header-anchor" href="#我的-pr-检查没有通过" aria-label="Permalink to &quot;我的 PR 检查没有通过&quot;">​</a></h3><p>可以根据 PR 评论里的日志链接，观察是哪里出现了问题。</p><p>如果感觉无法解决的，可以等仓库维护人员解决。</p>',77)),e(t),e(s)])}const L=i(F,[["render",G]]);export{j as __pageData,L as default};
