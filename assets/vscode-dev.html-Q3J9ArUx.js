import{_ as c}from"./image-build-pr预览-1-gJeirvJq.js";import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as r,c as p,a as i,b as t,d as o,w as d,e}from"./app-hlIcfMzO.js";const g="/assets/image-contribution-guide-vscode1-TBDiGbBA.png",_="/assets/image-贡献指南-安装插件-NPgqOHrx.png",u="/assets/image-contribute-vscode-new-branch-Ytk8Ic-g.png",f="/assets/image-contribution-new-branch-name-Km2dad8j.png",h="/assets/image-contribution-switch-to-new-branch-hkrBFZi4.png",m="/assets/image-贡献指南-进行对应的更改-oKOXlyzP.png",v="/assets/image-贡献指南-提交并推送-MgO_hJxR.png",b={},x=i("h1",{id:"通过-vscode-dev-网站在线更改本文档",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#通过-vscode-dev-网站在线更改本文档","aria-hidden":"true"},"#"),t(" 通过 VSCode.dev 网站在线更改本文档")],-1),k={href:"https://vscode.dev/github/zotero-chinese/wiki",target:"_blank",rel:"noopener noreferrer"},w=e('<li><p>等待页面加载完成</p></li><li><p>根据提示登录 GitHub 账号</p><figure><img src="'+g+'" alt="根据提示登录 GitHub 账号" tabindex="0" loading="lazy"><figcaption>根据提示登录 GitHub 账号</figcaption></figure></li><li><p>根据提示安装推荐的插件</p><figure><img src="'+_+'" alt="安装插件" tabindex="0" loading="lazy"><figcaption>安装插件</figcaption></figure></li><li><p>新建分支<br> 切换到 <code>源代码管理</code>窗格，依次选择<code>···</code> 按钮——<code>分支</code>——<code>创建分支</code>，输入分支名，并按回车确认。创建完成后根据提示切换到新分支。</p><figure><img src="'+u+'" alt="新建分支" tabindex="0" loading="lazy"><figcaption>新建分支</figcaption></figure><figure><img src="'+f+'" alt="输入新分支的名字" tabindex="0" loading="lazy"><figcaption>输入新分支的名字</figcaption></figure><figure><img src="'+h+'" alt="切换到新分支" tabindex="0" loading="lazy"><figcaption>切换到新分支</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">为什么要创建新分支？</p><p>严格地说，所有的修改都应在新分支进行，这有利于 Git 的管理。</p><p>具体的，如果要同时修改多个内容，某一部分内容被合并，但另一部分内容仍在修改，这时候只在主分支修改显然是不够用的。</p><p>此外，主仓库对 PR 采取 <code>splash and merge</code> 策略，这会把某一分支的所有提交压缩为一个提交然后合入主分支，这有利于保持仓库提交历史的简洁和线性关系，fork 仓库全部在主分支修改时，将无法自动保持与主仓库的提交历史同步，而使用新分支修改就没有这些烦恼。</p></div></li>',4),y=e('<p>进行对应的修改</p><figure><img src="'+m+'" alt="进行对应的修改" tabindex="0" loading="lazy"><figcaption>进行对应的修改</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">上传文件</p><p>图片可以通过在 <code>src/assets/</code> 文件夹右击，点击 <code>上传</code> 来上传到仓库。</p><p>也可以直接 <code>ctrl+v</code> 粘贴图片。</p></div>',3),z={class:"hint-container tip"},R=i("p",{class:"hint-container-title"},"文档风格和语法",-1),E=i("li",null,[i("p",null,"提交并推送"),i("figure",null,[i("img",{src:v,alt:"提交并推送",tabindex:"0",loading:"lazy"}),i("figcaption",null,"提交并推送")])],-1),P=i("li",null,[i("p",null,"发起 Pull Request")],-1),B=i("li",null,[i("p",null,"等待社区管理员审核合并")],-1),A=e('<p>PR 发起后，机器人会自动检查 PR 内容是否符合规范，也会部署一个预览版本，可以在这里查看预览。</p><figure><img src="'+c+'" alt="netlify预览pr" tabindex="0" loading="lazy"><figcaption>netlify预览pr</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">哪些情况会导致检查错误？</p><p>仓库的自动检查包含格式检查和构建检查。格式上，仓库使用 Markdown Lint 作为规范，如果你使用 VS Code 且安装了推荐的插件，那么通常 Lint 检查是可以通过的。</p><p>构建检查失败最可能的原因就是图片、链接等错误，如图片等目录级别错误、大小写错误、相对链接不存在等。</p></div><div class="hint-container tip"><p class="hint-container-title">如何更新 PR？</p><p>已经发起的 PR，可以直接在这个 PR 对应的分支上继续提交新的内容以更新这个 PR。</p></div>',4);function L(V,C){const a=n("ExternalLinkIcon"),s=n("RouterLink");return r(),p("div",null,[x,i("ol",null,[i("li",null,[i("p",null,[t("打开 "),i("a",k,[t("https://vscode.dev/github/zotero-chinese/wiki"),o(a)])])]),w,i("li",null,[y,i("div",z,[R,i("p",null,[t("文档的写作风格和语法等请参阅 "),o(s,{to:"/contributing/markdown.html#%E6%96%87%E6%A1%A3%E8%AF%AD%E6%B3%95%E9%A3%8E%E6%A0%BC"},{default:d(()=>[t("文档风格指南 #Markdown 语法")]),_:1}),t("。")])])]),E,P,B]),A])}const D=l(b,[["render",L],["__file","vscode-dev.html.vue"]]);export{D as default};
