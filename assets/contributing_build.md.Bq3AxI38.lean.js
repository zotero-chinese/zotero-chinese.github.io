import{_ as l,a as p}from"./chunks/build-更新main分支-1.DuCMaUlJ.js";import{ai as n,x as o,aE as r,L as a,aa as s,v as h}from"./chunks/framework.DNV5qdj1.js";const d="/assets/fork-repo-1.DUhfmMkh.png",c="/assets/fork-repo-2-1.BvzjgARi.png",k="/assets/vsc-%E5%85%8B%E9%9A%86git%E4%BB%93%E5%BA%93.BCvUkLC5.png",u="/assets/vsc-%E8%BE%93%E5%85%A5%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.sTOtHUi5.png",g="/assets/vsc-%E9%80%89%E4%B8%AD%E9%9C%80%E8%A6%81%E5%85%8B%E9%9A%86%E7%9A%84%E4%BB%93%E5%BA%93.D2dcb1pG.png",b="/assets/build-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96-1.BkxlRMk2.png",m="/assets/build-%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF-1.CQHG4gzS.png",F="/assets/build-%E5%90%AF%E5%8A%A8%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8-1.BRF-0Ma5.png",E="/assets/build-dev-server-1.CdV6onpC.png",y="/assets/build-%E6%8F%90%E4%BA%A4%E4%BF%AE%E6%94%B9-1.jkHyudWl.png",f="/assets/build-%E6%8E%A8%E9%80%81%E4%BF%AE%E6%94%B9-1.Bs8VsvCa.png",A=JSON.parse('{"title":"构建指南","description":"","frontmatter":{"title":"构建指南","icon":"fab fa-dev","date":"2023-07-21T11:08:04.000Z","updated":"2023-09-22T15:23:36.000Z"},"headers":[],"relativePath":"contributing/build.md","filePath":"wiki/contributing/build.md"}'),C={name:"contributing/build.md"};function B(v,i,_,w,G,P){const t=s("NolebaseGitContributors"),e=s("NolebaseGitChangelog");return h(),o("div",null,[i[0]||(i[0]=r(`<h1 id="构建指南" tabindex="-1">构建指南 <a class="header-anchor" href="#构建指南" aria-label="Permalink to &quot;构建指南&quot;">​</a></h1><p>此页面记录了本项目的完整构建步骤，主要针对喜欢本地开发的同学。</p><p>为了降低操作门槛，本指南所述操作步骤均尽可能使用了图形化界面。对于熟悉 Git 的同学，仍可使用自己喜欢的方式进行操作。</p><h2 id="项目概览" tabindex="-1">项目概览 <a class="header-anchor" href="#项目概览" aria-label="Permalink to &quot;项目概览&quot;">​</a></h2><p>本文档使用 Markdown 语法编写，产生的 Markdown 文件托管在 GitHub 上，使用 VitePress 作为静态页面生成器将 Markdown 文件构建为 HTML，使用 Netlify 作为持续集成供应商。</p><p>目前仓库地址为 <a href="https://github.com/zotero-chinese/wiki/" target="_blank" rel="noreferrer">https://github.com/zotero-chinese/wiki/</a> ，</p><h2 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h2><h3 id="所需软件安装" tabindex="-1">所需软件安装 <a class="header-anchor" href="#所需软件安装" aria-label="Permalink to &quot;所需软件安装&quot;">​</a></h3><p>本文的需要 Node.js 和 Git 安装在你的电脑上，后续步骤假定你已经安装这些程序且可以简单使用，若没有安装这些软件请跟随本小节指引完成安装。</p><p>为了方便编辑和提交，我们还推荐安装 <code>VS Code</code> 和 <code>GitHub Desktop</code> 两个软件。</p><details class="details custom-block"><summary>安装 Git</summary><p>所有文档均使用 <code>Git</code> 进行版本控制。以下步骤假定</p><p>用户已安装 git。若未安装，可以使用以下命令安装或更新 git：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3rZxP" id="tab-c7hPOUW" checked><label data-title="Fedora" for="tab-c7hPOUW">Fedora</label><input type="radio" name="group-3rZxP" id="tab-5vdAqw3"><label data-title="Ubuntu/Debian" for="tab-5vdAqw3">Ubuntu/Debian</label><input type="radio" name="group-3rZxP" id="tab-bl0pa2y"><label data-title="macOS" for="tab-bl0pa2y">macOS</label><input type="radio" name="group-3rZxP" id="tab-pzSKQFa"><label data-title="Windows" for="tab-pzSKQFa">Windows</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">打开 &lt;</span><span style="--shiki-light:#24292E;--shiki-light-text-decoration:underline;--shiki-dark:#E1E4E8;--shiki-dark-text-decoration:underline;">https://git-scm.com/downloads/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; ，下载并安装 Git for Windows。</span></span></code></pre></div></div></div><p>安装完成后，还需设置个人信息。打开终端，运行以下命令</p><p>（将 <code>zotero-user</code> 和 <code>&lt;zotero-user@gmail.com&gt;</code> 替换成个人对应的信息）:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置用户姓名和邮箱</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;zotero-user&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;zotero-user@gmail.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 ~/.gitconfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.gitconfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[user]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zotero-user</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zotero-user@gmail.com</span></span></code></pre></div><details class="details custom-block"><summary>Git 和 GitHub 学习资料</summary><p>以下修改文档并提交的步骤中使用了 Git 的一些常用选项，可以参考以下资料学习更多用法：</p><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noreferrer">git 简明指南</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noreferrer">廖雪峰的 Git 教程</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noreferrer">GotGitHub</a></li><li><a href="https://www.freecodecamp.org/news/practical-git-and-git-workflows/amp/" target="_blank" rel="noreferrer">How to Use Git and Git Workflows – a Practical Guide</a></li><li><a href="https://git-scm.com/book/zh/" target="_blank" rel="noreferrer">Pro Git</a></li></ul><p>GitHub 相关资料：</p><ul><li><a href="https://docs.github.com/cn/github" target="_blank" rel="noreferrer">GitHub 中文文档</a></li><li><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noreferrer">Understanding the GitHub flow</a></li></ul></details></details><details class="details custom-block"><summary>安装 Node.js</summary><p>安装 Node. js：<a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js 官网</a></p></details><details class="details custom-block"><summary>安装 VS Code</summary><p><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">https://code.visualstudio.com/</a></p></details><details class="details custom-block"><summary>安装 GitHub Desktop</summary><p>安装 <a href="https://desktop.github.com/" target="_blank" rel="noreferrer">https://desktop.github.com/</a></p></details><h3 id="克隆和复制仓库" tabindex="-1">克隆和复制仓库 <a class="header-anchor" href="#克隆和复制仓库" aria-label="Permalink to &quot;克隆和复制仓库&quot;">​</a></h3><ol><li><p>复制 (fork) 仓库至个人 GitHub 帐号</p><p>点击项目主页 <a href="https://github.com/zotero-chinese/wiki/" target="_blank" rel="noreferrer">https://github.com/zotero-chinese/wiki/</a> 右上角的 Fork 按钮，将该项目复刻到个人 GitHub 账户下。</p><p><img src="`+d+'" alt="复刻仓库" loading="lazy"></p><p><img src="'+c+'" alt="复刻仓库2" loading="lazy"></p><p>复制完成后，个人 GitHub 帐号下便有了 <a href="https://github.com/zotero-user/wiki/" target="_blank" rel="noreferrer">https://github.com/zotero-user/wiki/</a> 仓库。</p></li><li><p>克隆个人 GitHub 帐号下的复刻仓库到本地（复刻仓库默认是本地克隆仓库的远程 origin）</p><p>打开 VS Code，点击 <code>欢迎页面</code> 的 <code>克隆 Git 仓库…</code>，在弹出窗口中选中 <code>从 GitHub 克隆</code>，然后选择自己账户下的 fork 仓库，确认，克隆完成后根据提示打开文件夹。</p><p><img src="'+k+'" alt="克隆Git仓库" loading="lazy"></p><p><img src="'+u+'" alt="从GitHub克隆" loading="lazy"></p><p><img src="'+g+`" alt="选择仓库" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果你对 Git 或命令行不了解，可以考虑使用 <a href="https://desktop.github.com/" target="_blank" rel="noreferrer">GitHub 客户端</a> 或 VS Code 提供的图形化版本控制管理器作为命令行的替代。</p></div></li></ol><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p>通过下面的命令安装依赖项。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p><img src="`+b+'" alt="安装依赖" loading="lazy"></p><div class="info custom-block"><p class="custom-block-title">信息</p><p>上述「环境配置」步骤只需在第一次修改代码时执行一次，一旦复制或克隆某仓库后，就无需再次复制或克隆。</p></div><h2 id="修改文档" tabindex="-1">修改文档 <a class="header-anchor" href="#修改文档" aria-label="Permalink to &quot;修改文档&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">请参阅《使用代码空间修改》</p><p>该小节请参阅 <a href="./github-codespace#2-修改和提交">通过 GitHub Codespace 在线修改文档 #修改和提交</a> 了解详情。</p></div><details class="details custom-block"><summary>详细信息</summary><ol><li><p>在本地创建并切换至新分支，假定新分支名为 <code>pr-workflow</code>（分支名需简短、描述性且独特）:</p><p><img src="'+m+'" alt="创建新分支" loading="lazy"></p></li><li><p>启动开发服务器 使用以下命令启动开发服务器，如下图，开发服务器启动后，会给出几个本地链接，访问任一链接（通常为 Local）即可得到预览。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:dev</span></span></code></pre></div><p><img src="'+F+'" alt="启动开服务器" loading="lazy"></p><p>开发服务器会监听所有 <code>.md</code> 文件的修改，当有文件发生保存时，服务器会自动更新预览并刷新网页。</p><p><img src="'+E+'" alt="开发服务器" loading="lazy"></p></li><li><p>在新建分支中对文档做修改，修改过程中，可以随时在浏览器中检查修改效果</p><p>使用 Markdown 语法编写文档，如果你不清楚本文档所用的 Markdown 语法，请参阅 <a href="./markdown">Markdown 语法</a>。</p></li><li><p>提交 commit</p><p>在左侧 &quot; 源代码管理 &quot; 选项卡中，输入一个简短的提交描述，点击提交，然后将修改推送到线上。</p><p><img src="'+y+'" alt="提交修改" loading="lazy"></p><p><img src="'+f+'" alt="推送修改" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如前所述，提交命令也可以在 GitHub Desktop 中完成。</p></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>不建议直接在 main 分支中进行修改和提交，这可能会给你自己造成麻烦。</p><p>仓库对 main 分支开启了推送保护，对 main 分支的修改只能通过 Pull Request 进行，无法直接 Push。</p></div></li></ol></details><h2 id="pull-request" tabindex="-1">Pull Request <a class="header-anchor" href="#pull-request" aria-label="Permalink to &quot;Pull Request&quot;">​</a></h2><ol><li><p>提交 PR</p><p>进入个人 GitHub 帐号下的复制仓库（即 <a href="https://github.com/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97/wiki/" target="_blank" rel="noreferrer">https://github.com/你的名字/wiki/</a>）。</p><p>一般 GitHub 会自动提示有可提交的 PR，点击 「Compare &amp; pull request」，输入此 PR 的标题和具体描述，</p><p>最后点击 「Create pull request」 即可。</p></li><li><p>审核、评论以及修改 PR</p><p>文档维护者收到 PR 后，会对代码进行审核、评论以及修改，并决定是否接受（merge）或结束该 PR。</p><p>PR 发起后，Netlify 机器人会自动部署一个预览版本，可以在这里查看预览。</p><p><img src="'+l+'" alt="netlify预览pr" loading="lazy"></p><p>提交的 PR 在接收前可能需要读者多次修改。这种情况并不要创建新 PR，只需继续本地 pr-workflow 分支中修改并提交，然后再次推送 pr-workflow 分支至远程 origin 即可，修改将自动添加到已提交的 PR 中。</p><p>推送新的修改后，可以选择在该 PR 中留言，以通知维护者已提交新的修改。</p></li><li><p>PR 被接受并合并至官方 main 分支后，则可以更新 main 分支，并删除 pr-workflow 分支</p><p><img src="'+p+'" alt="更新main分支" loading="lazy"></p></li></ol><h2 id="其他的脚本" tabindex="-1">其他的脚本 <a class="header-anchor" href="#其他的脚本" aria-label="Permalink to &quot;其他的脚本&quot;">​</a></h2><h3 id="pnpm-run-docs-build" tabindex="-1">pnpm run docs:build <a class="header-anchor" href="#pnpm-run-docs-build" aria-label="Permalink to &quot;pnpm run docs:build&quot;">​</a></h3><p>构建脚本，用于将 markdown 构建为网页。</p><p>贡献者可以在提交前运行一次，查看是否有报错。</p><p>一般情况下，图片路径错误、链接错误会导致报错。</p><h3 id="pnpm-run-lint-fix" tabindex="-1">pnpm run lint:fix <a class="header-anchor" href="#pnpm-run-lint-fix" aria-label="Permalink to &quot;pnpm run lint:fix&quot;">​</a></h3><p>运行 Markdown Lint 和 Prettier，并修复可以自动修复的错误。</p>',33)),a(t),a(e)])}const z=n(C,[["render",B]]);export{A as __pageData,z as default};
